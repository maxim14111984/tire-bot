# main.py
import os
import asyncio
import logging
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from config import BOT_TOKEN, ADMIN_IDS
from database.db import init_db
from handlers.photo_handler import router as photo_router
from keyboards.reply_kb import get_start_kb

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, –±–µ–∑ Flask) ---
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header("Content-type", "text/plain")
            self.end_headers()
            self.wfile.write(b"OK")
        else:
            self.send_response(404)
            self.end_headers()

    def log_message(self, format, *args):
        return  # –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞

def run_http_server():
    port = int(os.getenv("PORT", 8000))
    server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
    logger.info(f"HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def run_bot():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(photo_router)

    @dp.message(lambda msg: msg.text and msg.text == "/start")
    async def cmd_start(message: Message):
        user_id = message.from_user.id
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ —à–∏–Ω!\n\n"
            "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /orders ‚Äî –º–æ–∏ –∑–∞–∫–∞–∑—ã\n"
            "‚Ä¢ /find <–Ω–æ–º–µ—Ä> ‚Äî –Ω–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É\n"
            "‚Ä¢ /export ‚Äî —Å–∫–∞—á–∞—Ç—å Excel (–º–æ–∏ –∑–∞–∫–∞–∑—ã)\n"
            + ("‚Ä¢ /admin_orders ‚Äî –≤—Å–µ –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω)\n" if user_id in ADMIN_IDS else ""),
            reply_markup=get_start_kb(user_id)
        )

    @dp.message(lambda msg: msg.text and msg.text == "/orders")
    async def cmd_orders(message: Message):
        from database.db import get_user_orders
        orders = await get_user_orders(message.from_user.id)
        if not orders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return
        text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            text += f"üîπ {order['tire_number']} ‚Äî {order['created_at']}\n"
        await message.answer(text)

    @dp.message(lambda msg: msg.text and msg.text.startswith("/find "))
    async def cmd_find(message: Message):
        from database.db import find_order_by_number
        query = message.text.replace("/find ", "").strip()
        if not query:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∏–Ω—ã: /find 12345")
            return
        orders = await find_order_by_number(query)
        if not orders:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
            return
        text = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            user_info = f"(–∞–¥–º–∏–Ω)" if order['user_id'] in ADMIN_IDS else ""
            text += f"üîπ {order['tire_number']} ‚Äî {order['created_at']} {user_info}\n"
        await message.answer(text)

    @dp.message(lambda msg: msg.text and msg.text == "/export")
    async def cmd_export(message: Message):
        from database.db import export_user_orders_to_excel
        user_id = message.from_user.id
        filename = f"orders_{user_id}.xlsx"
        success = await export_user_orders_to_excel(user_id, filename)
        if not success:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return
        await message.answer_document(document=filename)
        import os
        os.remove(filename)

    @dp.message(lambda msg: msg.text and msg.text == "/admin_orders")
    async def cmd_admin_orders(message: Message):
        if message.from_user.id not in ADMIN_IDS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        from database.db import get_all_orders
        orders = await get_all_orders()
        if not orders:
            await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        text = "üëë –í—Å–µ –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω):\n\n"
        for order in orders:
            text += f"üîπ {order['tire_number']} ‚Äî @{order['user_id']} ‚Äî {order['created_at']}\n"
        await message.answer(text)

    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

# --- –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –≤–º–µ—Å—Ç–µ ---
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    http_thread = threading.Thread(target=run_http_server, daemon=True)
    http_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    asyncio.run(run_bot())
