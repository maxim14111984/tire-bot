from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.db import get_or_create_client, search_clients, get_orders_by_client, save_order, update_order_status
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()

class ClientForm(StatesGroup):
    waiting_for_client = State()
    waiting_for_tire_number = State()
    waiting_for_name = State()
    waiting_for_size = State()
    waiting_for_work = State()

@router.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    tire_number = message.caption.strip() if message.caption else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    await state.update_data(file_id=file_id, tire_number=tire_number)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(ClientForm.waiting_for_client)

@router.message(ClientForm.waiting_for_client)
async def process_client(message: Message, state: FSMContext):
    client_name = message.text.strip()
    client = await get_or_create_client(client_name)
    await state.update_data(client_id=client["id"], client_name=client["name"])
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∏–Ω—ã (–º–∞—Ä–∫—É):")
    await state.set_state(ClientForm.waiting_for_name)

@router.message(ClientForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à–∏–Ω—ã:")
    await state.set_state(ClientForm.waiting_for_size)

@router.message(ClientForm.waiting_for_size)
async def process_size(message: Message, state: FSMContext):
    await state.update_data(size=message.text.strip())
    await message.answer("üîß –û–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É:")
    await state.set_state(ClientForm.waiting_for_work)

@router.message(ClientForm.waiting_for_work)
async def process_work(message: Message, state: FSMContext):
    data = await state.get_data()
    data["work"] = message.text.strip()
    await save_order(
        client_id=data["client_id"],
        tire_number=data["tire_number"],
        file_id=data["file_id"],
        name=data["name"],
        size=data["size"],
        work=data["work"]
    )
    await message.answer(f"‚úÖ –®–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {data['client_name']}! –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ")
    await state.clear()

# === –ü–û–ò–°–ö –ö–õ–ò–ï–ù–¢–û–í ===
@router.message(F.text.startswith("/client "))
async def search_client_cmd(message: Message):
    query = message.text.replace("/client ", "").strip()
    if not query:
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: /client –°–¢–ì")
        return
    clients = await search_clients(query)
    if not clients:
        await message.answer("–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for client in clients:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", callback_data=f"client_{client['id']}")]
        ])
        contact = f"\nüìû {client['phone']}" if client['phone'] else ""
        await message.answer(f"{'üè¢' if client['is_corporate'] else 'üë§'} {client['name']}{contact}", reply_markup=kb)

# === –ü–ê–ü–ö–ê –ö–õ–ò–ï–ù–¢–ê ===
@router.callback_query(F.data.startswith("client_"))
async def open_client_folder(callback: CallbackQuery):
    client_id = int(callback.data.split("_")[1])
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —à–∏–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
    orders = await get_orders_by_client(client_id)
    if not orders:
        await callback.message.answer("–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —à–∏–Ω.")
        return
    
    # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í —Ä–∞–±–æ—Ç–µ", callback_data=f"filter_{client_id}_–í —Ä–∞–±–æ—Ç–µ"),
            InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"filter_{client_id}_–ì–æ—Ç–æ–≤–æ")
        ],
        [
            InlineKeyboardButton(text="–£—Ç–∏–ª—å", callback_data=f"filter_{client_id}_–£—Ç–∏–ª—å"),
            InlineKeyboardButton(text="–í—Å–µ", callback_data=f"filter_{client_id}_–í—Å–µ")
        ]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", reply_markup=kb)

@router.callback_query(F.data.startswith("filter_"))
async def filter_orders(callback: CallbackQuery):
    _, client_id, status = callback.data.split("_", 2)
    client_id = int(client_id)
    status_filter = None if status == "–í—Å–µ" else status
    orders = await get_orders_by_client(client_id, status_filter)
    if not orders:
        await callback.message.answer(f"–ù–µ—Ç —à–∏–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'.")
        return
    for order in orders:
        caption = f"üîπ {order['tire_number']}\nüìù {order['name']}\nüìè {order['size']}\nüîß {order['work']}\nüè∑ {order['status']}"
        if order["file_id"]:
            await callback.message.answer_photo(photo=order["file_id"], caption=caption)
        else:
            await callback.message.answer(caption)
